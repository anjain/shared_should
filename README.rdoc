= Shared Should - Share and reuse shoulds, contexts, and setups with Shoulda - easy, schmeasy.

Shared Should allows for a easy creation of reusable shoulds, contexts and setups with familiar looking Shoulda syntax. Inspired by Rspec's shared example groups for context reuse, Shared Should allows sharing of contexts, shoulds,
and setup blocks.  Shared Should goes even further by allowing an initialization block and parameterization to fine-tune the usage of the shared functionality.

= Syntax and Usage

Here are some examples to demonstrate usage. The domain is renting textbooks - as we do at Bookrenter.com.

== Quick-Start Examples (declaring and invoking shared functionality)

Some quick examples to get you started using Shared Should.

=== Shared Should

  context "Book" do
    # declaration
    *shared_should_be* "available for checkout" { assert @book.available_for_checkout? }
    
    context "with an in-stock rentable book" do
      setup { @book = Book.new(:quantity => 1, :price => 10_00, :rentable => true }
      
      #invocation
      should_be "available for checkout"
    end
    
    context "with an in-stock purchasable book" do
      setup { @book = Book.new(:quantity => 1, :price => 10_00, :purchasable => true }
      
      #invocation
      should_be "available for checkout"
    end
  end

=== Shared Setup

  context "Book" do
    # declaration
    shared_setup_for "an in-stock book" { @book = Book.new(:quantity => 1, :price => 10_00) }
    
    context "with an in-stock rentable book" do
      # invocation
      setup_for "an in-stock book"
      setup { @book.rentable = true }
      
      should "be available for checkout" { assert @book.available_for_checkout? }
    end
    
    context "with an in-stock purchasable book" do
      # invocation
      setup_for "an in-stock book"
      setup { @book.purchasable = true }
      
      should "be available for checkout" { assert @book.available_for_checkout? }
    end
  end
  
=== Shared Context

  context "Book" do
    setup { @book = Book.new(:quantity => 1, :price => 10_00) }
    
    # declaration
    shared_context_for "a book available for checkout" do
      should "be in stock" { assert @book.quantity > 0 }
      should "have a non-negative price" { assert @book.price > 0 }
      should "be rentable or purchasable" { assert @book.rentable || @book.purchasable }
    end
    
    context "with an in-stock rentable book" do
      setup { @book.rentable = true }
      
      # invocation
      should_be "a book available for checkout"
    end
    
    context "with an in-stock purchasable book" do
      setup { @book.purchasable = true }
      
      # invocation
      should_be "a book available for checkout"
    end
  end
  
== Initialization Block

The shared invocation also accepts an initialization block by chaining <tt>when</tt> or <tt>with</tt>. This block can be used to create or modify instance variables used by the shared functionality.  It always executes before the shared functionality.

  context "Book" do
    setup { @book = Book.new(:quantity => 1, :price => 10_00) }
    
    shared_should_be "available for checkout" { assert @book.available_for_checkout? }
    
    context "with a rentable book" do
      # when shared_should_be "available for checkout" is executed, @book will have rentable equal to true
      should_be "available for checkout".when("rentable") { @book.rentable = true }
    end
    
    context "with a purchasable book" do
      should_be "available for checkout".when("purchasable") { @book.purchasable = true }
    end
  end

== Parameterizing Shares

Shared functions can also be parameterized using block parameters. This can be done for shared setups, shoulds, and setups and shoulds contained within a shared context. The value passed to the declared shared function is the return value of the initialization block. The below example parameterizes a shared setup.

  context "Book" do
    shared_setup_for "an in-stock book" do |rentable|
      @book = Book.new(:quantity => 1, :price => 10_00, :rentable => rentable, :purchasable => false)
    end

    context "with rentable book" do
      # the return value of the block is "true" which will be passed as the block parameter "rentable"
      setup_for("an in-stock book").with("a rentable book") { true }
      
      should "be available for checkout" { assert @book.available_for_checkout? }
    end
  end

Here is a parameterized shared should.

  context "Book" do
    context "with in-stock book" do
      setup { @book = Book.new(:quantity => 1, :price => 10_00) }
    
      shared_should_be "unavailable for checkout for price" do |price|
        @book.price = price
        assert_false @book.available_for_checkout?
      end

      should_be("unavailable for checkout for price").when("zero") { 0 }
      should_be("unavailable for checkout for price").when("negative") { -1 }
    end
  end

The shared functions also accept multiple parameters when the initialization block returns an array.

  context "Book" do
    context "with rentable book" do
      setup { @book = Book.new(:rentable => true) }
  
      shared_should_be "unavailable for checkout for quantity and price" do |quantity, price|
        @book.quantity = quantity
        @book.price = price
        assert_false @book.available_for_checkout?
      end

      should_be("unavailable for checkout for quantity and price").when("zero quantity") { [0, 10_00] }
      should_be("unavailable for checkout for quantity and price").when("zero price") { [1, 0] }
    end
  end

== Library of Shared Functionality

The shared functions can also be re-usable across multiple tests.

In your test helper file:

  class Test::Unit::TestCase
    shared_setup_for "an in-stock book" do |rentable, purchasable|
      @book = Book.new(:quantity => 1, :price => 10_00, :rentable => rentable, :purchasable => purchasable)
    end
  end

In your test file:

  class BookTest < Test::Unit::TestCase
    context "with an in-stock book" do
      shared_setup_for "an in-stock book".with { [true, true] }
      
      should "be in stock" { assert @book.quantity > 0 }
    end
  end


= Credits

Shared Shoulda is maintained by Michael Pearce (michael.pearce__at__bookrenter__com) and is funded by Bookrenter.com[http://www.bookrenter.com]. Many of the ideas that have inspired Shared Should come
from practical usage by the Bookrenter software development team and conversations with Bookrenter developers Andrew Wheeler and Philippe Huibonhoa.


= Copyright

Copyright (c) 2011 Michael Pearce, Bookrenter.com. See LICENSE.txt for further details.

